<!DOCTYPE html>
<html>
	<head>
	  <title>Deaths in Police Custody</title>
	  <meta name="viewport" content="width=device-width, initial-scale=1">

	  <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">
    <link href="//netdna.bootstrapcdn.com/font-awesome/4.1.0/css/font-awesome.min.css" rel="stylesheet">

    

    
    
    
   
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.1-rc2/jquery.min.js"></script>

    <script src="https://isotope.metafizzy.co/isotope.pkgd.min.js"></script>
<link href='https://fonts.googleapis.com/css?family=News+Cycle:400,700|Oswald' rel='stylesheet' type='text/css'>


    
    
    
    
    <%= stylesheet_link_tag    "application", media: "all", "data-turbolinks-track" => true %>
     <%= javascript_include_tag "application", "data-turbolinks-track" => true %>
    <%= csrf_meta_tags %>


	</head>
	<body>
<div class="tcontent">
    <nav class="navbar navbar-default navbar-fixed-top" role="navigation">

    <!-- Brand and toggle get grouped for better mobile display -->
 
      <div class="row">
  <div class="col-xs-7 col-sm-4 col-md-4 col-lg-4 col-xs-offset-1 col-lg-offset-1">
<select id="filters" class="form-control">

  <option value="*">Show all</option>
  <option value="homicide">Homicide by law enforcement</option>
  <option value="natural">Natural</option>
  <option value="delirium">Excited Delirium</option>
  <option value="accident">Accident</option>
  <option value="suicide">Suicide</option>
  <option value="unknown">Unknown</option>

</select>

</div>

<div class="clearfix visible-xs"></div>
<div class="col-xs-7 col-sm-4 col-md-4 col-lg-4 col-xs-offset-1 col-lg-offset-1">
<%= form_tag posts_path, :class => 'form-inline', method: :get do %>
<div class="form-group">

  <%= text_field_tag "query", nil, :class => 'form-control' %>
  <%= submit_tag "Search", :class => 'btn btn-primary' %>
  <%= link_to "Clear", posts_path %>
</div>
  </div>
<% end %>


</div>

</div>
<div class="col-md-6">
  Download the database as: <a href="http://s3.amazonaws.com/nj-data/police-custody-death/Deaths_Police_Custody_data.csv">CSV</a> or <a href="http://s3.amazonaws.com/nj-data/police-custody-death/Deaths_Police_Custody_data.xlsx">XLS</a>    
       
      </div>  
   
</nav>

    
   
	<%= yield %>


  
</div>



<script src="https://s3.amazonaws.com/nj-data/responsive_iframes/src/pym.js" type="text/javascript"></script>
    <script>var pymChild = new pym.Child();</script>

	</body>


     <script>
     $(document).ready(function() {

$(window).load(function(){




  // quick search regex
  var qsRegex;
  
  // init Isotope
  var $container = $('.isotope').isotope({
    itemSelector: 'li',
    layoutMode: 'vertical',
    animationEngine : 'css',
    containerStyle: { overflow:'scroll', position: 'relative'},
    resizesContainer: false
    
  });


  var filterFns = {
    homicide: function() {
      var name = $(this).find('.manner_of_death').text();
      return name.match( /Homicide by law enforcement$/ );
    },
    natural: function() {
      var natural = $(this).find('.manner_of_death').text();
      return natural.match( /^Natural/ );
    },
    delirium: function() {
      var delirium = $(this).find('.manner_of_death').text();
      
      return delirium.match( /(delirium)|(Unknown+[*])|(Homicide by law enforcement+[*])/ );

    },
    accident: function() {
      var accident = $(this).find('.manner_of_death').text();
      return accident.match( /^Accident/ );
    },
    suicide: function() {
      var suicide = $(this).find('.manner_of_death').text();
      return suicide.match( /^Suicide/ );
    },
    unknown: function() {
      var unknown = $(this).find('.manner_of_death').text();
      return unknown.match( /^Unknown/ );
    }
  };



   // bind filter on select change
  $('#filters').on( 'change', function() {
    // get filter value from option value
    var filterValue = this.value;

    // use filterFn if matches value
    filterValue = filterFns[ filterValue ] || filterValue;
    $container.isotope({ filter: filterValue });
  });

  // use value of search field to filter
  var $quicksearch = $('#query').keyup( debounce( function() {
    qsRegex = new RegExp( $quicksearch.val(), 'gi' );
    $container.isotope({filter: function() {
      return qsRegex ? $(this).text().match( qsRegex ) : true;
    }});

  }) );
  


// debounce so filtering doesn't happen every millisecond
function debounce( fn, threshold ) {
  var timeout;
  return function debounced() {
    if ( timeout ) {
      clearTimeout( timeout );
    }
    function delayed() {
      fn();
      timeout = null;
    }
    setTimeout( delayed, threshold || 100 );
  }
}

});



});


</script>
  
  
	</html>
